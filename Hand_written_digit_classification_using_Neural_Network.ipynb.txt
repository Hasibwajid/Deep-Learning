{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "86e70504",
      "metadata": {
        "id": "86e70504"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b07db98f",
      "metadata": {
        "id": "b07db98f"
      },
      "outputs": [],
      "source": [
        "(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8ba83a3a",
      "metadata": {
        "id": "8ba83a3a",
        "outputId": "c64365d6-4b71-481e-90b2-e18f84595b50"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "60000"
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(x_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0ef70c0d",
      "metadata": {
        "id": "0ef70c0d",
        "outputId": "93c88bd9-62e1-4713-cc83-a9cc276d005a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "10000"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4b1949b4",
      "metadata": {
        "id": "4b1949b4",
        "outputId": "c93b5861-091e-4b59-f838-442f9f6043d7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(28, 28)"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train[0].shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f1e5fb71",
      "metadata": {
        "id": "f1e5fb71",
        "outputId": "3ce3f456-b664-4400-a59f-9c1a602a9f70"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,\n",
              "         18,  18,  18, 126, 136, 175,  26, 166, 255, 247, 127,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,  30,  36,  94, 154, 170,\n",
              "        253, 253, 253, 253, 253, 225, 172, 253, 242, 195,  64,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,  49, 238, 253, 253, 253, 253,\n",
              "        253, 253, 253, 253, 251,  93,  82,  82,  56,  39,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,  18, 219, 253, 253, 253, 253,\n",
              "        253, 198, 182, 247, 241,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,  80, 156, 107, 253, 253,\n",
              "        205,  11,   0,  43, 154,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   1, 154, 253,\n",
              "         90,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 139, 253,\n",
              "        190,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11, 190,\n",
              "        253,  70,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35,\n",
              "        241, 225, 160, 108,   1,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "         81, 240, 253, 253, 119,  25,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,  45, 186, 253, 253, 150,  27,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,  16,  93, 252, 253, 187,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0, 249, 253, 249,  64,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,  46, 130, 183, 253, 253, 207,   2,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  39,\n",
              "        148, 229, 253, 253, 253, 250, 182,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24, 114, 221,\n",
              "        253, 253, 253, 253, 201,  78,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,  23,  66, 213, 253, 253,\n",
              "        253, 253, 198,  81,   2,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,  18, 171, 219, 253, 253, 253, 253,\n",
              "        195,  80,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,  55, 172, 226, 253, 253, 253, 253, 244, 133,\n",
              "         11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0, 136, 253, 253, 253, 212, 135, 132,  16,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0]], dtype=uint8)"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3597b87f",
      "metadata": {
        "id": "3597b87f"
      },
      "source": [
        "# Just be used to with how it works"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dd92d4b0",
      "metadata": {
        "id": "dd92d4b0",
        "outputId": "a236d0e7-b06a-4f29-b474-8afc41e10bf7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x195714de350>"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.matshow(x_train[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6544a112",
      "metadata": {
        "id": "6544a112",
        "outputId": "af33db7c-20c8-42ef-e99c-c1630c6ebca1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_train[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "033930c0",
      "metadata": {
        "id": "033930c0",
        "outputId": "cc129983-fb2b-4b5b-eaaf-7fefb3e6bd18"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x195735c6e60>"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.matshow(x_train[2])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e8b14725",
      "metadata": {
        "id": "e8b14725",
        "outputId": "95115e8b-59a4-467e-c723-059b8d4a9320"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_train[2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f5e0c543",
      "metadata": {
        "id": "f5e0c543",
        "outputId": "f062f1bb-1bbd-4c5c-b880-10e8b26f4660"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "for i in range(0 , 5):\n",
        "    plt.matshow(x_train[i])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eca12a2b",
      "metadata": {
        "id": "eca12a2b",
        "outputId": "d28b301d-57c3-4b64-af7a-e334d2545eaf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "5\n",
            "0\n",
            "4\n",
            "1\n",
            "9\n"
          ]
        }
      ],
      "source": [
        "for i in range(0, 5):\n",
        "    print(y_train[i])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "599e3b18",
      "metadata": {
        "id": "599e3b18"
      },
      "source": [
        "# Flatten 2 dimension array into 1 Dimension so that we can pass it to input layer of neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a18abf37",
      "metadata": {
        "id": "a18abf37",
        "outputId": "1c430cf5-c020-492b-818a-dcd044e41ed5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(60000, 28, 28)"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train.shape\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "de0dd212",
      "metadata": {
        "scrolled": true,
        "id": "de0dd212",
        "outputId": "011adeda-c51d-40d9-b7c8-1a9d3db7e76c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "60000"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(x_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "01655f00",
      "metadata": {
        "id": "01655f00"
      },
      "outputs": [],
      "source": [
        "# Scaled dataset to convert each val btw 0 and 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "73dbc6b3",
      "metadata": {
        "id": "73dbc6b3"
      },
      "outputs": [],
      "source": [
        "x_train = x_train/255\n",
        "x_test = x_test/255"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e6f9519b",
      "metadata": {
        "id": "e6f9519b"
      },
      "outputs": [],
      "source": [
        "x_train_flatten  = x_train.reshape(len(x_train),28*28)  # we need (60000, 28,28) in the form of (60000,784)\n",
        "x_test_flatten = x_test.reshape(len(x_test), 28*28)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "34e790bf",
      "metadata": {
        "id": "34e790bf",
        "outputId": "37883d63-f747-471d-8387-aaf791989327"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(60000, 784)"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train_flatten.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ed705492",
      "metadata": {
        "id": "ed705492",
        "outputId": "8c21b073-b4a5-4fe8-af5e-2551d9709e42"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(10000, 784)"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_test_flatten.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f717e5b3",
      "metadata": {
        "id": "f717e5b3",
        "outputId": "88d88978-eba9-4dcf-f465-b7cabb2b4358"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.01176471, 0.07058824, 0.07058824,\n",
              "       0.07058824, 0.49411765, 0.53333333, 0.68627451, 0.10196078,\n",
              "       0.65098039, 1.        , 0.96862745, 0.49803922, 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.11764706, 0.14117647, 0.36862745, 0.60392157,\n",
              "       0.66666667, 0.99215686, 0.99215686, 0.99215686, 0.99215686,\n",
              "       0.99215686, 0.88235294, 0.6745098 , 0.99215686, 0.94901961,\n",
              "       0.76470588, 0.25098039, 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.19215686, 0.93333333,\n",
              "       0.99215686, 0.99215686, 0.99215686, 0.99215686, 0.99215686,\n",
              "       0.99215686, 0.99215686, 0.99215686, 0.98431373, 0.36470588,\n",
              "       0.32156863, 0.32156863, 0.21960784, 0.15294118, 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.07058824, 0.85882353, 0.99215686, 0.99215686,\n",
              "       0.99215686, 0.99215686, 0.99215686, 0.77647059, 0.71372549,\n",
              "       0.96862745, 0.94509804, 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.31372549, 0.61176471, 0.41960784, 0.99215686, 0.99215686,\n",
              "       0.80392157, 0.04313725, 0.        , 0.16862745, 0.60392157,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.05490196,\n",
              "       0.00392157, 0.60392157, 0.99215686, 0.35294118, 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.54509804,\n",
              "       0.99215686, 0.74509804, 0.00784314, 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.04313725, 0.74509804, 0.99215686,\n",
              "       0.2745098 , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.1372549 , 0.94509804, 0.88235294, 0.62745098,\n",
              "       0.42352941, 0.00392157, 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.31764706, 0.94117647, 0.99215686, 0.99215686, 0.46666667,\n",
              "       0.09803922, 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.17647059,\n",
              "       0.72941176, 0.99215686, 0.99215686, 0.58823529, 0.10588235,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.0627451 , 0.36470588,\n",
              "       0.98823529, 0.99215686, 0.73333333, 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.97647059, 0.99215686,\n",
              "       0.97647059, 0.25098039, 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.18039216, 0.50980392,\n",
              "       0.71764706, 0.99215686, 0.99215686, 0.81176471, 0.00784314,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.15294118,\n",
              "       0.58039216, 0.89803922, 0.99215686, 0.99215686, 0.99215686,\n",
              "       0.98039216, 0.71372549, 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.09411765, 0.44705882, 0.86666667, 0.99215686, 0.99215686,\n",
              "       0.99215686, 0.99215686, 0.78823529, 0.30588235, 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.09019608, 0.25882353, 0.83529412, 0.99215686,\n",
              "       0.99215686, 0.99215686, 0.99215686, 0.77647059, 0.31764706,\n",
              "       0.00784314, 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.07058824, 0.67058824, 0.85882353,\n",
              "       0.99215686, 0.99215686, 0.99215686, 0.99215686, 0.76470588,\n",
              "       0.31372549, 0.03529412, 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.21568627, 0.6745098 ,\n",
              "       0.88627451, 0.99215686, 0.99215686, 0.99215686, 0.99215686,\n",
              "       0.95686275, 0.52156863, 0.04313725, 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.53333333, 0.99215686, 0.99215686, 0.99215686,\n",
              "       0.83137255, 0.52941176, 0.51764706, 0.0627451 , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.        , 0.        , 0.        , 0.        ])"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train_flatten[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d513ccae",
      "metadata": {
        "id": "d513ccae"
      },
      "source": [
        "# Create simple neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d1ec4729",
      "metadata": {
        "id": "d1ec4729",
        "outputId": "2d6155a4-137b-4429-c0ef-b7d07479fad7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "1875/1875 [==============================] - 10s 3ms/step - loss: 0.4656 - accuracy: 0.8794\n",
            "Epoch 2/5\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.3038 - accuracy: 0.9143\n",
            "Epoch 3/5\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.2832 - accuracy: 0.9202\n",
            "Epoch 4/5\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.2733 - accuracy: 0.9229\n",
            "Epoch 5/5\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.2668 - accuracy: 0.9255\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x19570e11810>"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model = keras.Sequential([\n",
        "    keras.layers.Dense(10, input_shape= ( 784,), activation = 'sigmoid')\n",
        "])\n",
        "\n",
        "model.compile(\n",
        "    optimizer = 'adam',\n",
        "    loss ='sparse_categorical_crossentropy',\n",
        "    metrics = ['accuracy']\n",
        ")\n",
        "\n",
        "model.fit(x_train_flatten, y_train, epochs = 5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c31e47eb",
      "metadata": {
        "id": "c31e47eb",
        "outputId": "4eb5c43d-137c-4d0e-a8f0-d386c321d616"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 1s 2ms/step - loss: 0.2695 - accuracy: 0.9245\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "[0.26945385336875916, 0.9244999885559082]"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.evaluate(x_test_flatten,y_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7bfd272b",
      "metadata": {
        "id": "7bfd272b"
      },
      "source": [
        "# Check"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "21ede40f",
      "metadata": {
        "id": "21ede40f",
        "outputId": "610eea2e-e9b0-47ad-abd3-ca7d4b426d1f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x19571057700>"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.matshow(x_test[1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "214cf9e5",
      "metadata": {
        "id": "214cf9e5",
        "outputId": "93fb82e1-1dd8-419b-b07c-a760f0f2b94b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([5.0382674e-01, 4.4019222e-03, 9.9955082e-01, 3.9453551e-01,\n",
              "       9.5582353e-10, 8.5756469e-01, 9.2686188e-01, 1.2890480e-12,\n",
              "       1.1907300e-01, 3.7349306e-09], dtype=float32)"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_predicted = model.predict(x_test_flatten)\n",
        "y_predicted[1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "678fac6b",
      "metadata": {
        "id": "678fac6b",
        "outputId": "91aa93f2-e812-4f65-99b2-bbcbd8722b32"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.argmax(y_predicted[1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5d2ce56a",
      "metadata": {
        "id": "5d2ce56a"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f747f605",
      "metadata": {
        "id": "f747f605",
        "outputId": "7d01b8e1-5c3c-4bb1-bc67-10831c34eec9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([7, 2, 1, 0, 4], dtype=uint8)"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_test[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "40954061",
      "metadata": {
        "id": "40954061",
        "outputId": "f5350df6-ce24-40d9-a811-7f4be6d4d78c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[7, 2, 1, 0, 4]"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_predicted_label = [np.argmax(i) for i in y_predicted]\n",
        "y_predicted_label[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fe9220dc",
      "metadata": {
        "id": "fe9220dc"
      },
      "outputs": [],
      "source": [
        "cm = tf.math.confusion_matrix (labels= y_test, predictions = y_predicted_label)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2ab59936",
      "metadata": {
        "id": "2ab59936",
        "outputId": "141ad6bc-28fa-427a-d79b-cb37ba267e44"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(69.0, 0.5, 'truth')"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x504 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import seaborn as sn\n",
        "plt.figure(figsize= (10,7))\n",
        "sn.heatmap(cm,annot= True, fmt= 'd')\n",
        "plt.xlabel('predicted')\n",
        "plt.ylabel('truth')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ce7c0ef8",
      "metadata": {
        "id": "ce7c0ef8"
      },
      "source": [
        "# Adding hidden layer to our model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7ddd62db",
      "metadata": {
        "id": "7ddd62db",
        "outputId": "2c20ca76-3f7d-4024-b7e1-39c2127a7e82"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "1875/1875 [==============================] - 8s 4ms/step - loss: 0.2687 - accuracy: 0.9247\n",
            "Epoch 2/5\n",
            "1875/1875 [==============================] - 8s 4ms/step - loss: 0.1201 - accuracy: 0.9643\n",
            "Epoch 3/5\n",
            "1875/1875 [==============================] - 8s 4ms/step - loss: 0.0849 - accuracy: 0.9746\n",
            "Epoch 4/5\n",
            "1875/1875 [==============================] - 7s 4ms/step - loss: 0.0642 - accuracy: 0.9804\n",
            "Epoch 5/5\n",
            "1875/1875 [==============================] - 7s 4ms/step - loss: 0.0507 - accuracy: 0.9844\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x195737aa4d0>"
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model = keras. Sequential([\n",
        "    keras.layers.Dense(100,input_shape= ( 784,), activation = 'relu'),#hidden layer with 100 neurons\n",
        "    keras.layers.Dense(10,activation = 'sigmoid')#no need to tell input size to each layer\n",
        "])\n",
        "\n",
        "model. compile(\n",
        "    optimizer = 'adam',\n",
        "    loss ='sparse_categorical_crossentropy',\n",
        "    metrics =['accuracy']\n",
        ")\n",
        "\n",
        "model.fit(x_train_flatten, y_train, epochs= 5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ad2bd978",
      "metadata": {
        "id": "ad2bd978"
      },
      "source": [
        "# if you dont want to flatten the input array then use this"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ea98c981",
      "metadata": {
        "id": "ea98c981",
        "outputId": "a874646c-90da-407f-c782-7fb36aed2be5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "1875/1875 [==============================] - 11s 6ms/step - loss: 0.2405 - accuracy: 0.9304\n",
            "Epoch 2/5\n",
            "1875/1875 [==============================] - 11s 6ms/step - loss: 0.1020 - accuracy: 0.9700\n",
            "Epoch 3/5\n",
            "1875/1875 [==============================] - 10s 5ms/step - loss: 0.0687 - accuracy: 0.9793\n",
            "Epoch 4/5\n",
            "1875/1875 [==============================] - 11s 6ms/step - loss: 0.0495 - accuracy: 0.9847\n",
            "Epoch 5/5\n",
            "1875/1875 [==============================] - 11s 6ms/step - loss: 0.0377 - accuracy: 0.9883\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x19579d85ed0>"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model = keras. Sequential([\n",
        "    keras.layers.Flatten(input_shape=(28,28)),\n",
        "    keras.layers.Dense(200, activation = 'relu'),\n",
        "    keras.layers.Dense(10,activation = 'sigmoid')\n",
        "])\n",
        "\n",
        "model. compile(\n",
        "    optimizer = 'adam',\n",
        "    loss ='sparse_categorical_crossentropy',\n",
        "    metrics =['accuracy']\n",
        ")\n",
        "\n",
        "model.fit(x_train, y_train, epochs= 5)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fde53841",
      "metadata": {
        "id": "fde53841",
        "outputId": "1d846856-1368-443d-948b-c4a45093b493"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 1s 4ms/step - loss: 0.0764 - accuracy: 0.9768\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "[0.07643250375986099, 0.9768000245094299]"
            ]
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.evaluate(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "51416814",
      "metadata": {
        "id": "51416814"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.2"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}